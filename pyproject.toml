[project]
name = "dynamic_routing_analysis"
version = "0.1.1"
description = "Tools for accessing, processing and presenting data from Dynamic Routing experiments."
authors = [
    { name = "Ben Hardcastle", email = "ben.hardcastle@alleninstitute.org" },
    { name = "Ethan McBride", email = "ethan.mcbride@alleninstitute.org" },
    { name = "Shailaja Akella", email = "shailaja.akella@alleninstitute.org" },
]
dependencies = [
    "numpy>=1.24.4",
    "pandas>=2.0.3",
    "polars[pandas,plot]>=1.32.0",
    "matplotlib>=3.7.2",
    "npc-lims>=0.1.0",
    "xarray>=2024.6.0",
    "statsmodels>=0.14.2",
    "scikit-learn>=1.5.1",
    "lazynwb>=0.2.2",
]
requires-python = ">=3.9"
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
]

[project.optional-dependencies]
plot = [
    "rasterio>=1.4.2",
    "shapely>=2.0.6",
    "geopandas>=1.0.1",
    "altair[save]>=5.4.1",
    "pynrrd>=1.1.3",
    "numba>=0.60.0",
]
pynwb = [
    "pynwb>=2.3.3",
]
npc_sessions = [
    "npc-sessions>=0.0.226",
]
codeocean = [
    "aind-session>=0.3.16",
]

[project.license]
text = "MIT"

[project.urls]
Repository = "https://github.com/AllenInstitute/dynamic_routing_analysis"
Issues = "https://github.com/AllenInstitute/dynamic_routing_analysis/issues"

[project.scripts]
task = "poethepoet:main"

[dependency-groups]
task_runner = ["poethepoet>=0.33.1"]
linting = ["black>=25.1.0", "isort>=6.0.1", "ruff>=0.11.2"]
testing = ["pytest>=7.4.0", "mypy>=1.4.1", "pytest-cov>=4.1.0"]
bump = ["bump-my-version>=1.1.1", "git-changelog>=2.5.3"]

[tool.uv]
package = true

[tool.bumpversion]
tag = true
allow_dirty = true
commit = true
commit_args = "-a"
message = "Bump version: {current_version} â†’ {new_version} [skip actions]"
pre_commit_hooks = [
    "uv lock --upgrade-package lazynwb",
    "git-changelog -o CHANGELOG.md",
    "uv build",
    "uv publish",
]

[tool.poe.tasks]
mypy = "mypy src --install-types --non-interactive"
pytest = "pytest --cov-report term-missing:skip-covered --cov-report=html"
test = ["mypy", "pytest"]
ruff = "ruff check src --fix-only"
black = "black src"
format = ["ruff", "black"]
bump_pub_tag = "bump-my-version bump patch"
release = ["format", "bump_pub_tag"]

[tool.ruff]
fix = true
ignore-init-module-imports = true
select = [
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "E",      # pycodestyle
    "F",      # pyflakes
    "PGH",    # pygrep-hooks
    "RUF",    # ruff
    "W",      # pycodestyle
    "YTT",    # flake8-2020
    "ANN",
    "C",
    "I",
    "RUF100",
    "N",
    "UP",
]
# extend-ignore = ["B018", "B019"]
src = ["src"]
extend-exclude = ["tests/fixtures"]
target-version = "py39"


[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    "--doctest-modules",
    "--ignore-glob=*scripts*,*examples*",
    "--doctest-glob=*README.md",
]
doctest_optionflags = [
    "NORMALIZE_WHITESPACE",
    "IGNORE_EXCEPTION_DETAIL",
    "ELLIPSIS",
]
testpaths = [
    ".",
    "tests",
    "src",
]

[tool.coverage.paths]
source = [
    "src",
]

[tool.coverage.run]
branch = true
source = [
    "src",
]
omit = [
    "*__init__*",
]

[tool.coverage.report]
skip_covered = true
show_missing = true
skip_empty = true
exclude_also = [
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@(abc.)?abstractmethod",
    "@typing.runtime_checkable",
]

[build-system]
requires = [
    "setuptools>=61",
    "wheel",
]
build-backend = "setuptools.build_meta"

[tool.setuptools]
license-files = ["LICENSE"]
